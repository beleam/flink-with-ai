# AUTOGENERATED! DO NOT EDIT! File to edit: spam.ipynb (unless otherwise specified).

__all__ = ['parser', 'args', 'input_params', 'df', 'y', 'X']

# Cell
import argparse
parser= argparse.ArgumentParser()

parser.add_argument('--max_features', type=int)

args = parser.parse_args()
input_params = args.__dict__

# Cell
import pandas as pd
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.multiclass import OneVsRestClassifier

# Cell
df = pd.read_csv('spam.csv', encoding='latin-1')
df.set_index('v2')
y = df.pop('v1').to_numpy()
X = df.pop('v2').to_numpy()
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)

# Cell

import warnings
import sys

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import ElasticNet
from urllib.parse import urlparse
import mlflow
import mlflow.sklearn
import mlflow.pyfunc

#conda_env=mlflow.pyfunc.get_default_conda_env()

with mlflow.start_run():

    svc_tfidf = Pipeline([
        ("tfidf_vectorizer", TfidfVectorizer(stop_words="english", max_features=input_params['max_features'])),
        ("linear svc", OneVsRestClassifier(SVC(kernel='linear')))
    ])

    model = svc_tfidf
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    ac_score = accuracy_score(y_test, y_pred)
    print(classification_report(y_test, y_pred))

    mlflow.log_param("max_features", input_params['max_features'])
    mlflow.log_metric("accuracy_score", ac_score)

    tracking_url_type_store = urlparse(mlflow.get_tracking_uri()).scheme

    if tracking_url_type_store != "file":
        mlflow.sklearn.log_model(model, "model", registered_model_name="SMSSpamModel")
    else:
        mlflow.sklearn.log_model(model, "model")